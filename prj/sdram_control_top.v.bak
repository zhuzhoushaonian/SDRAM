/***************************************************
*	Module Name		:	sdram_control_top		   
*	Engineer		   :	小梅哥
*	Target Device	:	EP4CE10F17C8
*	Tool versions	:	Quartus II 13.0
*	Create Date		:	2017-3-31
*	Revision		   :	v1.0
*	Description		:   加FIFO后的SDRAM控制器顶层文件

它丫丫的，顶层的Wr_data跟SDRAM_control里头的同名，不同啊老哥
**************************************************/
module sdram_control_top(
	Clk,
	Rst_n,
	Sd_clk,

	Wr_data,
	Wr_en,
	Wr_addr,
	//Wr_max_addr,
	Wr_load,
	Wr_clk,
	Wr_full,
	Wr_use,

	Rd_data,
	Rd_en,
	Rd_addr,
	//Rd_max_addr,
	Rd_load,
	Rd_clk,
	Rd_empty,
	Rd_use,

	Sa,
	Ba,
	Cs_n,
	Cke,
	Ras_n,
	Cas_n,
	We_n,
	Dq,
	Dqm,
	main_state,
   // sd_wr,         //写SDRAM使能信号
  //  sd_rd,         //读SDRAM使能信号
    sd_caddr,       //写SDRAM时列地址
    sd_raddr,     //写SDRAM时行地址
    sd_baddr,  //写SDRAM时Bank地址
	 request_total,
	 Dq_bottom
);

`include        "Sdram_Params.h"
	
	input               Clk;            //系统时钟
	input               Rst_n;          //复位信号，低电平有效
	input               Sd_clk;         //SDRAM时钟信号

   input[`DSIZE-1:0]   Wr_data;        //待写入数据
   input               Wr_en;          //写数据使能信号
   input	[23:0]        Wr_addr;        //写数据起始地址
  // input	[23:0]        Wr_max_addr;    //写数据最大地址(SC_BL的整数倍)
   input               Wr_load;        //写FIFO清零信号
   input               Wr_clk;         //写FIFO数据时钟信号
   output              Wr_full;        //写FIFO数据满信号
   output[7:0]         Wr_use;         //写FIFO数据可用数据量

   output[`DSIZE-1:0]  Rd_data;        //读出的数据
   input					  Rd_en;			   //读数据使能信号
   input	[23:0]        Rd_addr;		   //读数据起始地址
// input	[23:0]        Rd_max_addr;	   //读数据最大地址(SC_BL的整数倍)，好聪明哦这个设计
   input					  Rd_load;		   //读FIFO清零信号
   input					  Rd_clk;		   //读FIFO数据时钟信号
   output				  Rd_empty;		   //读FIFO数据空信号
   output[7:0]		     Rd_use;		   //读FIFO数据可用数据量

	output[`ASIZE-1:0]  Sa;             //SDRAM地址总线 
	output[`BSIZE-1:0]  Ba;             //SDRAMBank地址 
	output              Cs_n;           //SDRAM片选信号 
	output              Cke;            //SDRAM时钟使能
	output              Ras_n;          //SDRAM行地址选
	output              Cas_n;          //SDRAM列地址选
	output              We_n;           //SDRAM写使能
	inout  [`DSIZE-1:0]  Dq;             //SDRAM数据总线 
	output[`DSIZE/8-1:0]Dqm;            //SDRAM数据掩码
	output  [3:0]       main_state;      //主状态寄存器
	output wire [2:0] request_total;
//reg can_to_sdram;
reg can_to_fifo;

	reg                  sd_wr;          //写SDRAM使能信号
	reg                  sd_rd;          //读SDRAM使能信号
	input   [`ASIZE-1:0]   sd_caddr;       //写SDRAM时列地址
	input   [`ASIZE-1:0]   sd_raddr;       //写SDRAM时行地址
	input   [`BSIZE-1:0]   sd_baddr;       //写SDRAM时Bank地址
	
//	wire [`DSIZE-1:0]   sd_wr_data;     //待写入SDRAM数据
	wire [`DSIZE-1:0]   sd_rd_data;     //读出SDRAM的数据
	wire                sd_rdata_vaild; //读SDRAM时数据有效区
	wire                sd_wdata_vaild; //写SDRAM时数据有效区
	wire                sd_wdata_done;  //一次写突发完成标识位
	wire                sd_rdata_done;  //一次读突发完成标识位
	wire [7:0]          fifo_rduse;     //写FIFO模块可读数据量
	wire [7:0]          fifo_wruse;     //读FIFO模块已写数据量
	//reg [23:0]          wr_sdram_addr;  //写SDRAM的地址
	// reg [23:0]          rd_sdram_addr;  //读SDRAM的地址
	// wire                sd_wr_req;      //请求写数据到SDRAM      
	// wire                sd_rd_req;      //请求向SDRAM读数据
    wire [`DSIZE-1:0] real_Dq;
	 output  [`DSIZE-1:0] Dq_bottom;
	//SDRAM控制器模块例化
	sdram_control sdram_control(
		.Clk(Clk),
		.Rst_n(Rst_n),

		.Wr(sd_wr),
		//.Rd(sd_rd),     
		.Rd(0),//这里我暂时封死，不让你读出来，也就是Rd==0，读请求不存在
		.Caddr(sd_caddr),
		.Raddr(sd_raddr),
		.Baddr(sd_baddr),
		.Wr_data(sd_wr_data),
		.Rd_data(sd_rd_data),
		.Rd_data_vaild(sd_rdata_vaild),
		.Wr_data_vaild(sd_wdata_vaild),
		.Wdata_done(sd_wdata_done),
		.Rdata_done(sd_rdata_done),

		.Sa(Sa),
		.Ba(Ba),
		.Cs_n(Cs_n),
		.Cke(Cke),
		.Ras_n(Ras_n),
		.Cas_n(Cas_n),
		.We_n(We_n),
		.Dq_bottom(Dq_bottom),
		.Dqm(Dqm), 
		.main_state(main_state),
		.request_total(request_total)
	);
reg can_not_wr;
	//写FIFO模块例化（写入到SDRAM之前添加FIFO）
	fifo_wr sd_wr_fifo(
	   .aclr(Wr_load),//异步复位信号
		.data(Wr_data),
		.rdclk(Clk),
		.rdreq(sd_wdata_vaild && (fifo_rduse > 10)),//必须保留FIFO有一定的数据才能出来，不然写入SDRAM的使能信号是依靠FIFO里头数据》8决定的
		//.rdreq(can_to_sdram && sd_wdata_vaild),//可以写入到SDRAM了，此时就可以将FIFO读出来了
		.wrclk(Wr_clk),
		.wrreq(Wr_en && can_not_wr),//外部使能写来的时候，可以拉高此信号wrreq(这样就可以写入了）
		.q(sd_wr_data),
		.rdempty(),
		.rdusedw(fifo_rduse),
		.wrfull(Wr_full),
		.wrusedw(Wr_use)
	);

   //读FIFO模块例化
	fifo_rd sd_rd_fifo(
	   .aclr(Rd_load),  //异步复位信号，清零读FIFO信号的意思
		.data(sd_rd_data),
		.rdclk(Rd_clk),//读出存储于FIFO中的数据到外界（pc），所以需要独立单时钟
		.rdreq(Rd_en),
		.wrclk(Sd_clk),//将SDRAM中的数据写入到FIFO中
		.wrreq(can_to_fifo && sd_rdata_vaild),
		.q(Rd_data),
		.rdempty(Rd_empty),
		.rdusedw(Rd_use),
		.wrfull(),
		.wrusedw(fifo_wruse)
	);

	   assign real_Dq = Dq_bottom;
		assign Dq = sd_wdata_vaild ? real_Dq:16'bz;

	//写数据的时候列地址和进来的data数据进行增加处理
	//reg [`DSIZE-1:0]  real_wr_data;
	//always@(posedge Clk or negedge Rst_n)
	//begin
	//	if(!Rst_n)
	//	real_wr_data <= 'b0;
	//	else if(sd_wdata_vaild == 1)
	//	real_wr_data <= real_wr_data + 1'b1;
	//	else
	//	real_wr_data <= data;
	//end
	
	
	//写SDRAM请求信号
	assign sd_wr_req = (fifo_rduse >= SC_BL)?1'b1:1'b0;
	//读SDRAM请求信号
	assign sd_rd_req = (!Rd_load)&&(fifo_wruse[7]==1'b0)?1'b1:1'b0;
	
		//写SDRAM使能信号
	always@(posedge Clk or negedge Rst_n)
	begin
		if(!Rst_n)
			sd_wr <= 1'b0;
		else if(sd_wr_req)
			sd_wr <= 1'b1;
		else
			sd_wr <= 1'b0;
	end
	//读SDRAM使能信号
	always@(posedge Clk or negedge Rst_n)
	begin
		if(!Rst_n)
			sd_rd <= 1'b0;
		else if(sd_rd_req)
			sd_rd <= 1'b1;
		else
			sd_rd <= 1'b0;
	end
	
	//大不了你先读出空的数据嘛，先写后读，怎么会有小于8的情况发生哦
//always@(posedge Clk or negedge Rst_n)
//	begin
//		if(!Rst_n)
//		can_to_sdram <= 1'b0;
//		else if(fifo_rduse >= 8)
//		can_to_sdram <= 1'b1;
//		else 
//		can_to_sdram <= 1'b0;
//	end
	
	always@(posedge Clk or negedge Rst_n)
	begin
		if(!Rst_n)
		can_to_fifo <= 1'b0;
		else if(fifo_wruse >= 8)
		can_to_fifo <= 1'b1;
		else 
		can_to_fifo <= 1'b0;
	end
		
	always@(posedge Clk or negedge Rst_n)  //保证FIFO不会死掉
	begin
		if(!Rst_n)
		can_not_wr <= 1'b1;
		else if (Wr_full)
		can_not_wr <= 1'b0;
		else 
		can_not_wr <= 1'b1;
	end
	

		
		
endmodule 