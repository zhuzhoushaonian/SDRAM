/***************************
尝试将主状态机改成三段式的
如果数据短了一些东西，可能就是送数据线上的有效时间段出问题了
**************************************************/
module sdram_control(
   Clk,
	Rst_n,
	
	Wr,
	Rd,
	Caddr,
	Raddr,
	Baddr,
	Wr_data,
	Rd_data,
	Rd_data_vaild,
	Wr_data_vaild,
	Wdata_done,
	Rdata_done,	

	Sa,
	Ba,
	Cs_n,
	Cke,
	Ras_n,
	Cas_n,
	We_n,
	Dq_bottom,   //因为一旦这个文件不是顶层文件，这个DQ就不是数据总线了
	Dqm,
	main_state,
	real_caddr_r,
	request_total
);

`include        "Sdram_Params.h"

	



	//	SDRAM Side
	
     //  注意这里是输出端口
	
	//---------------------------------
	
	//reg             FF;              //标记寄存器
	
	
	// wire            ref_break_wr;    //写操作过程中，刷新定时到来到此次写操作结束有效区间
	// wire            ref_break_rd;    //读操作过程中，刷新定时到来到此次读操作结束有效区间
	// wire            wr_break_ref;    //刷新过程中，写操作到来到此次刷新结束有效区间
	// wire            rd_break_ref;    //刷新过程中，读操作到来到此次刷新结束有效区间

	
	
	/**********重新编写变量喽**************/
//	reg             rd_req;          //读操作请求	
	output[`DSIZE/8-1:0]  Dqm;       //SDRAM数据掩码
    output	         Wdata_done;    //一次写突发完成标识位（虽然我觉得是写完成标志更好理解，什么鬼一次哦）
	output            Rdata_done;    //一次读突发完成标识位（虽然我觉得是读完成标志更好理解，什么鬼一次哦）	
    output[`DSIZE-1:0]Rd_data;       //读出SDRAM的数据，估计这里省略掉了从SDRAM出来到进入到fpga的数据，直接用这个fpga出来跟刚才待写入到SDRAM的数据进行对比，因为你不可能SDRAM独立线
	output [`DSIZE-1:0]    Dq_bottom;        //SDRAM数据总线，，，注意，这个是双向的接口啊啊啊啊
	input [`DSIZE-1:0]Wr_data;       //待写入SDRAM数据	
	output reg        Rd_data_vaild; //读SDRAM时数据有效区
	output reg        Wr_data_vaild; //写SDRAM时数据有效区
    input [`ASIZE-1:0]Caddr;         //写SDRAM时列地址
	input [`ASIZE-1:0]Raddr;         //写SDRAM时行地址
	input [`BSIZE-1:0]Baddr;         //写SDRAM时Bank地址
	output                Cs_n;      //SDRAM片选信号
	output                Ras_n;     //SDRAM行地址选通
	output                Cas_n;     //SDRAM列地址选通
	output                We_n;      //SDRAM写使能          
	reg [15:0]      rd_cnt;          //一次突发读操作过程时间计数器	
    reg [`ASIZE-1:0]raddr_r;         //读写行地址寄存器
	reg [`ASIZE-1:0]caddr_r;         //读写列地址寄存器
	reg [`BSIZE-1:0]baddr_r;         //读写bank地址寄存器		
//	reg             wr_req;          //写操作请求
	reg [15:0]      wr_cnt;          //一次突发写操作过程时间计数器
//	reg             ref_req;         //刷新操作请求
	reg [15:0]      ref_cnt;         //自动刷新过程时间计数器	
    reg             ref_opt_done;    //一次刷新操作完成标志位
	reg             wr_opt_done;     //一次突发写操作完成标志位
	reg             rd_opt_done;     //一次突发读操作完成标志位
	output reg[`ASIZE-1:0]Sa;        //SDRAM地址总线
	output reg[`BSIZE-1:0]Ba;        //SDRAMBank地址 
	reg [3:0]       Command;	      //操作命令，等于{CS_N,RAS_N,CAS_N,WE}
	output reg [3:0]       main_state;      //主状态寄存器
    input             Wr;            //写SDRAM使能信号
	input             Rd;            //读SDRAM使能信号
	wire            ref_time_flag;   //刷新定时时间标志位，定时到达时置1
    output                Cke;       //SDRAM时钟使能
	wire [3:0]      init_cmd;        //SDRAM初始化命令输出
	wire[`ASIZE-1:0]init_addr;       //SDRAM初始化地址输出
	wire            init_done;       //SDRAM初始化完成标志位

	input             Clk;           //系统时钟信号
	input             Rst_n;         //复位信号，低电平有效 
	reg [31:0]      ref_time_cnt;    //刷新定时计数器	
	reg             FF;              //标记寄存器

	assign Cke = Rst_n;
	
   //SDRAM命令信号组合
	assign {Cs_n,Ras_n,Cas_n,We_n} = Command;
	
	
	
	//数据掩码，采用16位数据，掩码为全零
	assign Dqm = 2'b00;	
	
	//---------------------------------	
	//SDRAM前期初始化模块例化	
	sdram_init sdram_init(
		.Clk(Clk),
		.Rst_n(Rst_n),
		.Command(init_cmd),
		.Saddr(init_addr),
		.Init_done(init_done)
	);	
	
	
/********接下来的是为了完成四个请求参数,完成优先级判断部分********/
	//刷新定时计数器
	always@(posedge Clk or negedge Rst_n)
	begin
		if(!Rst_n)
			ref_time_cnt <= 0;
		else if(ref_time_cnt == AUTO_REF)
			ref_time_cnt <= 1;
		else if(init_done || ref_time_cnt > 0)
			ref_time_cnt <= ref_time_cnt + 10'd1;
		else
			ref_time_cnt <= ref_time_cnt;
	end

	//刷新定时时间标志位，定时到达时置1，定时时间到ref_time_flag
	assign ref_time_flag = (ref_time_cnt == AUTO_REF);	
	output wire [2:0] request_total; 
    assign request_total = {Wr,Rd,ref_time_flag};  

reg read_request;
 always@(posedge Clk or negedge Rst_n) begin 
 if(!Rst_n)
 read_request <= 1'b0;
 else if (request_total == 3'b010)
 read_request <= 1'b1;
 else
 read_request <= 1'b0;
 end
 
 reg write_request;
  always@(posedge Clk or negedge Rst_n) begin 
 if(!Rst_n)
 write_request <= 1'b0;
 else if ((request_total == 3'b100)||(request_total == 3'b110))
 write_request <= 1'b1;
 else
 write_request <= 1'b0;
 end
 
  reg aref_request;
  always@(posedge Clk or negedge Rst_n) begin 
 if(!Rst_n)
 aref_request <= 1'b0;
 else if (ref_time_flag)
 aref_request <= 1'b1;
 else
 aref_request <= 1'b0;
 end
   
   reg no_request;
    always@(posedge Clk or negedge Rst_n) begin 
 if(!Rst_n)
 no_request <= 1'b0;
 else if (request_total == 000)
 no_request <= 1'b1;
 else
 no_request <= 1'b0;
 end
 
 
 //---------------------------------
 
   //主状态机
localparam 
		JUDGE  = 4'b0001,  //仲裁状态
	    AREF   = 4'b0010,  //刷新
		WRITE  = 4'b0100,  //写
		READ   = 4'b1000;  //读
		
 reg  aref_request_one;
 reg  aref_request_two;
// assign aref_request_one = ((main_state == WRITE) && (aref_request == 1)) ? ((wr_opt_done == 1)?0:1) : aref_request_one;
 //assign aref_request_two = ((main_state == READ) && (aref_request == 1)) ? ((rd_opt_done == 1)?0:1) : aref_request_two;

 always@(posedge Clk or negedge Rst_n) begin 
		if(!Rst_n)
			aref_request_two <= 1'b0;
		else if((main_state == READ) && (aref_request == 1)) 
					begin 
						if(rd_opt_done == 1)
							aref_request_two <= aref_request_two;
						else
							aref_request_two <= 1'b1;
					 end 
		else if((main_state == READ) && (aref_request == 0))
		   aref_request_two <= aref_request_two;
		else
		aref_request_two <= 1'b0;
													end
	
	 always@(posedge Clk or negedge Rst_n) begin 
		if(!Rst_n)
			aref_request_one <= 1'b0;
		else if((main_state == WRITE) && (aref_request == 1)) 
					begin 
						if(wr_opt_done == 1)
							aref_request_one <= aref_request_one;
						else
							aref_request_one <= 1'b1;
					 end 
		else if((main_state == WRITE) && (aref_request == 0))
		   aref_request_one <= aref_request_one;
		else
		aref_request_one <= 1'b0;
													end
	
 always@(posedge Clk or negedge Rst_n)
	begin
		if(!Rst_n)begin
			main_state <= JUDGE;
		          end
		else begin
			case(main_state)
				JUDGE:begin
				//仲裁态中要干什么来的
					Command <= init_cmd;
					Sa <= init_addr;    //这个是什么鬼来的 
					if(aref_request == 1) //应该需要在这些地方发送返回标志
					    main_state <= AREF;
					else if(read_request == 1)
					    main_state <= READ;
					else if(write_request == 1)
					    main_state <= WRITE;
					else 
					    main_state <= JUDGE;
				end

				AREF:begin
				      auto_refre;//刷新的工作时序，记得补上
					  if(aref_request == 1)  
                                 main_state <= AREF;
                      else if((read_request == 1) && (ref_opt_done == 1)) 
					               begin
									 main_state <= READ;
							       end
                      else if((write_request == 1)&&(ref_opt_done))
					               begin
                                     main_state <= WRITE;	
							      end
					 end	
	

				WRITE:begin
				       write_data;
				       if((aref_request_one == 1) && (wr_opt_done == 1) )  
					                       begin
						                   main_state <= AREF;
							               end
			           else if((read_request) && (wr_opt_done))  
					                        begin
							               main_state <= READ;
						                    end
			            else if((write_request))
                    						begin
							               main_state <= WRITE;
								            end
					 end 
					
				READ:begin
					read_data;//读时序待会记得补上
					     if((aref_request_two == 1) && (rd_opt_done == 1)) 
						                        begin
							                   main_state <= AREF;
								                end
						 else if((read_request == 1))
                        						 begin 
							                   main_state <= READ;
								                 end
						 else if((write_request == 1) && (rd_opt_done == 1))
						                        begin
							                   main_state <= WRITE;
								                end
					end

		     
			endcase
		    end
	end
	//---------------------------------	
	
	//---------------------------------	
	//读写行列地址寄存器
	always@(posedge Clk or negedge Rst_n)
	begin
		if(!Rst_n)
		begin
			raddr_r <= 0;
			caddr_r <= 0;
			baddr_r <= 0;
		end
		else if(((main_state == JUDGE)&&(write_request == 1)) || ((main_state == JUDGE)&&(read_request == 1)) )          
		begin
			raddr_r <= Raddr;
			caddr_r <= Caddr;
			baddr_r <= Baddr;
		end
		else
			;
	end	
	//---------------------------------
	output reg [`ASIZE-1:0] real_caddr_r;  
	always@(posedge Clk or negedge Rst_n)
	begin
		if(!Rst_n)
		  real_caddr_r <= 0;
		 else if(wr_opt_done) //每次写完的时候加上突发长度
		  real_caddr_r <= real_caddr_r + SC_BL;
		 else if((512 - real_caddr_r)< SC_BL) 
		  real_caddr_r <= 0;
		 else if (read_request == 1)  //同样的道理，读请求来的时候将列地址清零
		  real_caddr_r <= 0;
		 else 
		  real_caddr_r <= caddr_r + real_caddr_r;
	end

reg [`ASIZE-1:0] real_raddr_r;
	always@(posedge Clk or negedge Rst_n)
	begin
		if(!Rst_n)
		  real_raddr_r <= 0;
		  else if((512 - real_caddr_r)< SC_BL)  //列地址快完的时候，不管是写还是读都得加一
		  real_raddr_r <= real_raddr_r + 1;
		  else if((main_state == 4'h8) && (read_request == 1))//如果读的时候，开始读的时候清零(用请求判断你是第一次）
		  real_raddr_r <= 0;
		  else 
		  real_raddr_r <= raddr_r + real_raddr_r;
	end
	
	//---------------------------------	
	//自动刷新操作任务,采用线性序列机方法	
   localparam 
      ref_PRE_TIME = 1'b1,              //预充电时刻
      ref_REF1_TIME = REF_PRE+1,        //第一次自动刷新时刻
      ref_REF2_TIME = REF_PRE+REF_REF+1,//第二次自动刷新时刻
      ref_END = REF_PRE+REF_REF*2;      //自动刷新结束时刻

	  
	  
	//自动刷新过程时间计数器
	always@(posedge Clk or negedge Rst_n)
	begin
		if(!Rst_n)
			ref_cnt <= 16'd0;
		else if ( (ref_cnt == ref_END) || ((main_state == JUDGE)&&(aref_request == 1)) )        
			ref_cnt <= 16'd0;
		else 
			ref_cnt <= ref_cnt + 16'd1;
	end	

	//一次刷新操作完成标志位
	always@(posedge Clk or negedge Rst_n)
	begin
		if(!Rst_n)
			ref_opt_done <= 1'b0;
		else if(ref_cnt == ref_END)
			ref_opt_done <= 1'b1;
		else
			ref_opt_done <= 1'b0;
	end

	

	//自动刷新操作,线性序列机，应该是顺序策略
	task auto_refre;   
	begin
		case(ref_cnt)
			ref_PRE_TIME:begin
				Command <= C_PRE;     //预充电
				Sa[10] <= 1'b1;					
			end				
			
			ref_REF1_TIME:begin
				Command <= C_AREF;    //自动刷新
			end
			
			ref_REF2_TIME:begin
				Command <= C_AREF;    //自动刷新
			end
			
			ref_END:begin
			//	FF <= 1'b1;
				Command <= C_NOP;
			end

			default:
				Command <= C_NOP;			
		endcase		
	end
	endtask	
	//---------------------------------

	//---------------------------------
	//一次突发写操作任务,线性序列机方法
	localparam 
      wr_ACT_TIME = 1'b1,                       //激活行时刻
      wr_WRITE_TIME = SC_RCD+1,                 //写命令时刻
      wr_PRE_TIME = SC_RCD+SC_BL+WR_PRE+1,      //预充电时刻
      wr_END_TIME = SC_RCD+SC_BL+WR_PRE+REF_PRE;//写操作结束时刻
				  
	//一次突发写操作过程时间计数器
	always@(posedge Clk or negedge Rst_n)
	begin
		if(!Rst_n)	
			wr_cnt <= 16'd0;
		else if((wr_cnt == wr_END_TIME)||((main_state == JUDGE)&&(write_request == 1)))
			wr_cnt <= 16'd0;
		else
			wr_cnt <= wr_cnt + 16'd1;
	end

	//一次写操作过程完成标志位
	always@(posedge Clk or negedge Rst_n)
	begin
		if(!Rst_n)
			wr_opt_done <= 1'b0;
		else if(wr_cnt == wr_END_TIME)
			wr_opt_done <= 1'b1;
		else
			wr_opt_done <= 1'b0;
	end

	

	//写数据操作，数据写入(改变)时刻有效区间,这个应该是表明正在写的时候，为了能够将输入的数据在写阶段送到数据总线上
	always@(posedge Clk or negedge Rst_n)
	begin
		if(!Rst_n)
			Wr_data_vaild <= 1'b0;
		else if((wr_cnt > SC_RCD)&&(wr_cnt <= SC_RCD+SC_BL))   //可是我一直觉得不应该是这个时间段？这两个是什么含义
			Wr_data_vaild <= 1'b1; 
		else
			Wr_data_vaild <= 1'b0;
	end
	
     //SDRAM数据线，采用三态输出
	//assign Dq = Wr_data_vaild ? Wr_data:16'bz;
	assign Dq_bottom = Wr_data;  //由于我要用在顶层上头，所以这个Dq不当做数据总线了，当做一个传输变量即可
	
	//一次突发写操作数据写完成标志位，同样我也觉得不应该是这个时间段
	assign Wdata_done = (wr_cnt == SC_RCD+SC_BL+1)?1'b1:1'b0;
	
	
	
	//一次突发写操作任务,类似线性序列机方法，不带自动预充电的写时序
	task write_data;
	begin
		case(wr_cnt)
			wr_ACT_TIME:begin
				Command <= C_ACT;
				Sa <= real_raddr_r;             //激活行	raddr_r
				Ba <= baddr_r;
			end

			wr_WRITE_TIME:begin
				Command <= C_WR;
				Sa <= {1'b0,real_caddr_r[8:0]}; //激活列
				Ba <= baddr_r;
			end

			wr_PRE_TIME:begin				
				Command <= C_PRE;          //预充电
				Sa[10] <= 1'b1;
			end

			wr_END_TIME:begin
				Command <= C_NOP;
			//	FF <= 1'b1;
			end

			default:
				Command <= C_NOP;
		endcase
	end	
	endtask
	//---------------------------------	
	
	//---------------------------------
	//一次突发读操作任务,线性序列机方法	
	localparam
		rd_ACT_TIME  = 1'b1,              //激活行时刻
		rd_READ_TIME = SC_RCD+1,          //读命令时刻
		rd_PRE_TIME  = SC_RCD+SC_BL+1,    //预充电时刻
		rd_END_TIME  = SC_RCD+SC_CL+SC_BL;//读操作结束时刻
 
	//一次突发读操作过程时间计数器
	always@(posedge Clk or negedge Rst_n)
	begin
		if(!Rst_n)
			rd_cnt <= 16'd0;
		else if((rd_cnt == rd_END_TIME)|| ((main_state == JUDGE)&&(read_request == 1)))
			rd_cnt <= 16'd0;
		else 
			rd_cnt <= rd_cnt + 16'd1;
	end

	//一次突发读操作过程完成标志位	
	always@(posedge Clk or negedge Rst_n)
	begin
		if(!Rst_n)
			rd_opt_done <= 1'b0;
		else if(rd_cnt == rd_END_TIME)
			rd_opt_done <= 1'b1;
		else
			rd_opt_done <= 1'b0;
	end

	

   //一次突发读操作过程中数据读完标志位，同样还是觉得时间点有问题，不过直接送输出比较好改
	assign Rdata_done = (rd_cnt == rd_END_TIME)?1'b1:1'b0;

	//读数据操作，数据有效区
	always@(posedge Clk or negedge Rst_n)
	begin
		if(!Rst_n)
			Rd_data_vaild <= 1'b0;
		else if((rd_cnt > SC_RCD+SC_CL)
		        &&(rd_cnt <= SC_RCD+SC_CL+SC_BL))
			Rd_data_vaild <= 1'b1;
		else
			Rd_data_vaild <= 1'b0;
	end

	//读数据
	assign Rd_data = Dq_bottom;
	
	//一次突发读操作任务,类似线性序列机方法，同样还是不带自动预充电
	task read_data;
	begin
		case(rd_cnt)
			rd_ACT_TIME:begin			     
				Command <= C_ACT;
				Sa <= real_raddr_r; 
				Ba <= baddr_r;
			end

			rd_READ_TIME:begin			 
				Command <= C_RD;
				Sa <= {1'b0,real_caddr_r[8:0]};
				Ba <= baddr_r;
			end

			rd_PRE_TIME:begin
				Command <= C_PRE;        
				Sa[10] <= 1'b1;
			end
			
			rd_END_TIME:begin
				//  FF <= 1'b1;
				Command <= C_NOP;
			end
			
			default:
				Command <= C_NOP;
		endcase
	end
	endtask
	//---------------------------------

	
	
endmodule 