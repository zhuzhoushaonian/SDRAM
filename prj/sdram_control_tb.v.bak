/**********************************
如果后期读次数太少的话，此时已经没有了写请求，没有了读请求，就只能等待固定时间来一次的刷新，但由于刷
新被我保持住了（只有读写请求可破保持态），所以会一直刷新（而不是刷一次进入仲裁），从而增大了功率
19.4.29:注意写命令的时候刷新估计还没来到，所以一直不触发刷新请求
**************************************/



`timescale 1ns/1ns
`define CLK100_PERIOD 10

module sdram_control_tb;

`include        "D:\fpga_prj\sdram_three_version\testbeach\Sdram_Params.h"

	reg                Clk;
	reg                Rst_n;
	
	reg                Wr;
	reg                Rd;	
	reg [`ASIZE-1:0]   Caddr; 
	reg [`ASIZE-1:0]   Raddr; 
	reg [`BSIZE-1:0]   Baddr;	
	reg [`DSIZE-1:0]   Wr_data;
	wire[`DSIZE-1:0]   Rd_data;
	wire               Wr_data_vaild;
	wire               Rd_data_vaild;
   
	wire               sdram_clk;
	wire               sdram_cke;
	wire               sdram_cs_n;
	wire               sdram_ras_n;
	wire               sdram_cas_n;
	wire               sdram_we_n;
	wire [`BSIZE-1:0]  sdram_bank;
	wire [`ASIZE-1:0]  sdram_addr;
	wire [`DSIZE-1:0]  sdram_dq;
	wire [`DSIZE/8-1:0]sdram_dqm;
	wire [3:0]       main_state;      //主状态寄存器
   wire  [`ASIZE-1:0] real_caddr_r;  
	assign sdram_clk = ~Clk;
	wire [2:0] request_total;
	wire Rdata_done;
	
	//SDRAM控制器模块例化
	sdram_control sdram_control(
		.Clk(Clk),
		.Rst_n(Rst_n),
		
		.Wr(Wr),
		.Rd(Rd),
		.Caddr(Caddr),
		.Raddr(Raddr),
		.Baddr(Baddr),
		.Wr_data(Wr_data),
		.Rd_data(Rd_data),
		.Rd_data_vaild(Rd_data_vaild),
		.Wr_data_vaild(Wr_data_vaild),
		.Wdata_done(),
		.Rdata_done(Rdata_done),
		
		.Sa(sdram_addr),
		.Ba(sdram_bank),
		.Cs_n(sdram_cs_n),
		.Cke(sdram_cke),
		.Ras_n(sdram_ras_n),
		.Cas_n(sdram_cas_n),
		.We_n(sdram_we_n),
		.Dq_bottom(sdram_dq),
		.Dqm(sdram_dqm),
		.main_state(main_state),
		.real_caddr_r(real_caddr_r),
		.request_total(request_total)
	);
	
	//SDRAM模型例化
	sdr sdram_model(
		.Dq(sdram_dq), 
		.Addr(sdram_addr),  
		.Ba(sdram_bank), 
		.Clk(sdram_clk), 
		.Cke(sdram_cke), 
		.Cs_n(sdram_cs_n), 
		.Ras_n(sdram_ras_n), 
		.Cas_n(sdram_cas_n), 
		.We_n(sdram_we_n), 
		.Dqm(sdram_dqm)
	);
	
	initial Clk = 1'b1;
	always #(`CLK100_PERIOD/2) Clk = ~Clk;
	
	initial
	begin
		Rst_n   = 0;
		Wr      = 0;
		Rd      = 0;
		Caddr   = 0;
		Raddr   = 0;
		Baddr   = 0;
		Wr_data = 0;
		#(`CLK100_PERIOD*200+1);
		Rst_n   = 1;
		
		@(posedge sdram_control.sdram_init.Init_done)
		#2000;

		repeat(600)                 //写入100组数据
		begin
		Wr    = 1;
		Baddr = 2;
		#10;
		//#`CLK100_PERIOD;
		Wr    = 0;  
		#10;
			 
	//		if(Caddr == 512-SC_BL)begin
	//			Caddr = 0; 
	//			Raddr = Raddr + 1;   //1行写满，行加1
	//			Wr= 1;
	//			Baddr = 2;
	//			#10;
	//			Wr = 0;
	//			#30;
	//		end
	//		else begin
	//			Caddr = Caddr + SC_BL;
	//			Wr = 1;
	//			Baddr = 2;
	//			#10;
	//			Wr = 0;
	//			#30;
	//			end 
//
	//	//	#5000;                  //延时5us
		end	
		
		repeat(600)                 //这个如果读太少的话，就会后期出现无请求态，就一直刷新一直刷新，又被我不断置高，耗尽了功率
		begin
		Rd    = 1;
		Baddr = 2;
		#10;
		//#`CLK100_PERIOD;
		Rd    = 0; 
		#10;
		end
		
			#40000;    //跑一趟少点时间好不好，仿真好久好累人的，注意有一些时间被repeat吃掉了
			$stop; 
	end

	
	initial
	begin
		forever begin
			@(posedge Wr_data_vaild);
			repeat(SC_BL)            //改变待写入的数据
			begin
				#`CLK100_PERIOD;
				Wr_data = Wr_data + 1;
			end		
		end
	end

endmodule 